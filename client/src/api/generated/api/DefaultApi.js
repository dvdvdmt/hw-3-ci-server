/**
 * CI server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Build from '../model/Build';
import Settings from '../model/Settings';

/**
 * Default service.
 * @module api/DefaultApi
 * @version 1.0.0
 */
export default class DefaultApi {
  /**
   * Constructs a new DefaultApi.
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Return build information
   * @param {String} buildId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Build} and HTTP response
   */
  getBuildInfoWithHttpInfo(buildId) {
    let postBody = null;
    // verify the required parameter 'buildId' is set
    if (buildId === undefined || buildId === null) {
      throw new Error("Missing the required parameter 'buildId' when calling getBuildInfo");
    }

    let pathParams = {
      buildId: buildId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Build;
    return this.apiClient.callApi(
      '/builds/{buildId}',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Return build information
   * @param {String} buildId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Build}
   */
  getBuildInfo(buildId) {
    return this.getBuildInfoWithHttpInfo(buildId).then(function(response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Return build logs
   * @param {String} buildId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link String} and HTTP response
   */
  getBuildLogsWithHttpInfo(buildId) {
    let postBody = null;
    // verify the required parameter 'buildId' is set
    if (buildId === undefined || buildId === null) {
      throw new Error("Missing the required parameter 'buildId' when calling getBuildLogs");
    }

    let pathParams = {
      buildId: buildId,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = 'String';
    return this.apiClient.callApi(
      '/builds/{buildId}/logs',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Return build logs
   * @param {String} buildId
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link String}
   */
  getBuildLogs(buildId) {
    return this.getBuildLogsWithHttpInfo(buildId).then(function(response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Return a list of builds
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Build>} and HTTP response
   */
  getBuildsWithHttpInfo() {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = [Build];
    return this.apiClient.callApi(
      '/builds',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Return a list of builds
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Build>}
   */
  getBuilds() {
    return this.getBuildsWithHttpInfo().then(function(response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Return repository settings
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Settings} and HTTP response
   */
  getSettingsWithHttpInfo() {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Settings;
    return this.apiClient.callApi(
      '/settings',
      'GET',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Return repository settings
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Settings}
   */
  getSettings() {
    return this.getSettingsWithHttpInfo().then(function(response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Add specified commit to the build queue
   * @param {String} commitHash
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  runBuildWithHttpInfo(commitHash) {
    let postBody = null;
    // verify the required parameter 'commitHash' is set
    if (commitHash === undefined || commitHash === null) {
      throw new Error("Missing the required parameter 'commitHash' when calling runBuild");
    }

    let pathParams = {
      commitHash: commitHash,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = [];
    let returnType = null;
    return this.apiClient.callApi(
      '/builds/{commitHash}',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Add specified commit to the build queue
   * @param {String} commitHash
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  runBuild(commitHash) {
    return this.runBuildWithHttpInfo(commitHash).then(function(response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Saves repository settings
   * @param {module:model/Settings} settings
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Settings} and HTTP response
   */
  saveSettingsWithHttpInfo(settings) {
    let postBody = settings;
    // verify the required parameter 'settings' is set
    if (settings === undefined || settings === null) {
      throw new Error("Missing the required parameter 'settings' when calling saveSettings");
    }

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Settings;
    return this.apiClient.callApi(
      '/settings',
      'POST',
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null
    );
  }

  /**
   * Saves repository settings
   * @param {module:model/Settings} settings
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Settings}
   */
  saveSettings(settings) {
    return this.saveSettingsWithHttpInfo(settings).then(function(response_and_data) {
      return response_and_data.data;
    });
  }
}
