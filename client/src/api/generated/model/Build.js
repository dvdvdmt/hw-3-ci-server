/**
 * CI server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Build model module.
 * @module model/Build
 * @version 1.0.0
 */
class Build {
  /**
   * Constructs a new <code>Build</code>.
   * @alias module:model/Build
   * @param buildNumber {Number}
   * @param commitHash {String}
   * @param commitMessage {String}
   * @param authorName {String}
   * @param status {module:model/Build.StatusEnum}
   */
  constructor(buildNumber, commitHash, commitMessage, authorName, status) {
    Build.initialize(this, buildNumber, commitHash, commitMessage, authorName, status);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, buildNumber, commitHash, commitMessage, authorName, status) {
    obj['buildNumber'] = buildNumber;
    obj['commitHash'] = commitHash;
    obj['commitMessage'] = commitMessage;
    obj['authorName'] = authorName;
    obj['status'] = status;
  }

  /**
   * Constructs a <code>Build</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Build} obj Optional instance to populate.
   * @return {module:model/Build} The populated <code>Build</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Build();

      if (data.hasOwnProperty('buildNumber')) {
        obj['buildNumber'] = ApiClient.convertToType(data['buildNumber'], 'Number');
      }
      if (data.hasOwnProperty('commitHash')) {
        obj['commitHash'] = ApiClient.convertToType(data['commitHash'], 'String');
      }
      if (data.hasOwnProperty('commitMessage')) {
        obj['commitMessage'] = ApiClient.convertToType(data['commitMessage'], 'String');
      }
      if (data.hasOwnProperty('authorName')) {
        obj['authorName'] = ApiClient.convertToType(data['authorName'], 'String');
      }
      if (data.hasOwnProperty('start')) {
        obj['start'] = ApiClient.convertToType(data['start'], 'Date');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'String');
      }
      if (data.hasOwnProperty('duration')) {
        obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
      }
    }
    return obj;
  }
}

/**
 * @member {Number} buildNumber
 */
Build.prototype['buildNumber'] = undefined;

/**
 * @member {String} commitHash
 */
Build.prototype['commitHash'] = undefined;

/**
 * @member {String} commitMessage
 */
Build.prototype['commitMessage'] = undefined;

/**
 * @member {String} authorName
 */
Build.prototype['authorName'] = undefined;

/**
 * @member {Date} start
 */
Build.prototype['start'] = undefined;

/**
 * @member {module:model/Build.StatusEnum} status
 */
Build.prototype['status'] = undefined;

/**
 * A number of milliseconds that passed while build was running
 * @member {Number} duration
 */
Build.prototype['duration'] = undefined;

/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Build['StatusEnum'] = {
  /**
   * value: "Waiting"
   * @const
   */
  Waiting: 'Waiting',

  /**
   * value: "InProgress"
   * @const
   */
  InProgress: 'InProgress',

  /**
   * value: "Success"
   * @const
   */
  Success: 'Success',

  /**
   * value: "Fail"
   * @const
   */
  Fail: 'Fail',

  /**
   * value: "Canceled"
   * @const
   */
  Canceled: 'Canceled',
};

export default Build;
